{
	"info": {
		"_postman_id": "75b2496e-5ca2-49a1-a927-c10f829c61be",
		"name": "TravelWise Phase III",
		"description": "Search cities for their safety score, airports for their location and city, and countries for their covid statistics. Filter or sort those results numerically or alphabetically.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cities",
			"item": [
				{
					"name": "City Safety - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05403578-76eb-4df0-b836-79c5ced8b237",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"first city should be Quezon City\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].name[0]).to.eql(\"Quezon City\");",
									"    pm.expect(jsonData[0].country[0]).to.eql(\"Philippines\");",
									"    pm.expect(jsonData[0].region[0]).to.eql(\"Metro Manila\");",
									"});",
									"pm.test(\"second city should be Davao City\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].name[0]).to.eql(\"Davao City\");",
									"    pm.expect(jsonData[1].country[0]).to.eql(\"Philippines\");",
									"    pm.expect(jsonData[1].region[0]).to.eql(\"Davao Region\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cities"
							]
						},
						"description": "returns data on safety score of city along with country, coordinates, and region"
					},
					"response": [
						{
							"name": "Successfully returned cities",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cities"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "x-next",
									"value": "irure quis",
									"description": "A link to the next page of responses"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"city_id\": 88518,\n        \"name\": [\"Quezon City\"],\n        \"country\": [\"Philippines\"],\n        \"region\": [\"Metro Manila\"],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\"PH\"],\n        \"latitude\": 14.633333333,\n        \"longitude\": 121.033333333\n    },\n    {\n        \"city_id\": 89988,\n        \"name\": [\"Davao City\"],\n        \"country\": [\"Philippines\"],\n        \"region\": [\"Davao Region\"],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\"PH\"],\n        \"latitude\": 7.066666666,\n        \"longitude\": 125.6\n    }\n...]"
						}
					]
				},
				{
					"name": "City Safety - search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54ed3e57-453d-4fdc-a948-a120731dcc42",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"First city based on women's safety score should be Los Angeles\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].city_id).to.eql(126549);",
									"    pm.expect(jsonData[0].country[0]).to.eql(\"United States of America\");",
									"    pm.expect(jsonData[0].name[0]).to.eql(\"Los Angeles\");",
									"    pm.expect(jsonData[0].region[0]).to.eql(\"California\");",
									"    pm.expect(jsonData[0].women).to.eql(26);",
									"});",
									"pm.test(\"Third city based on women's safety score should be San Antonio\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[2].city_id).to.eql(118731);",
									"    pm.expect(jsonData[2].country[0]).to.eql(\"United States of America\");",
									"    pm.expect(jsonData[2].name[0]).to.eql(\"San Antonio\");",
									"    pm.expect(jsonData[2].region[0]).to.eql(\"Texas\");",
									"    pm.expect(jsonData[2].women).to.eql(33);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cities/search?country=United States of America&sort=women",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cities",
								"search"
							],
							"query": [
								{
									"key": "city_id",
									"value": "<string>",
									"description": "optional- search for id",
									"disabled": true
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "optional- search for city name",
									"disabled": true
								},
								{
									"key": "country",
									"value": "<string>",
									"description": "optional- search for cities in country",
									"disabled": true
								},
								{
									"key": "region",
									"value": "<string>",
									"description": "optional- search for cities in region",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "<[name, city_id, country_code, country, region, longitude, latitude, lgbtq, medical , overall, physical, political, theft, women]>",
									"description": "optional- sort alphabetically or numerically by specified paramter. put '-' before parameter to reverse order",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "<[city_id, longitude, latitude, latitude, lgbtq, medical, overall, physical, political, theft, women]><[[GTE], [LTE]]><integer>",
									"description": "optional- filter results by paramter to be greater than or equal to or less than or equal to value",
									"disabled": true
								},
								{
									"key": "country",
									"value": "United States of America"
								},
								{
									"key": "sort",
									"value": "women"
								}
							]
						},
						"description": "returns data on safety score of searched cities along with country, coordinates, and region"
					},
					"response": [
						{
							"name": "City Safety - search for cities in USA sorting by ascending women's safety score",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cities/search?country=United States of America&sort=women",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cities",
										"search"
									],
									"query": [
										{
											"key": "city_id",
											"value": "<string>",
											"description": "optional- search for id",
											"disabled": true
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "optional- search for city name",
											"disabled": true
										},
										{
											"key": "region",
											"value": "<string>",
											"description": "optional- search for cities in region",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "<[name, city_id, country_code, country, region, longitude, latitude, lgbtq, medical , overall, physical, political, theft, women]>",
											"description": "optional- sort alphabetically or numerically by specified paramter. put '-' before parameter to reverse order",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "<[city_id, longitude, latitude, latitude, lgbtq, medical, overall, physical, political, theft, women]><[GTE, LTE]><integer>",
											"description": "optional- filter results by paramter to be greater than or equal to or less than or equal to value",
											"disabled": true
										},
										{
											"key": "country",
											"value": "United States of America"
										},
										{
											"key": "sort",
											"value": "women"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "2934"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"city_id\": 126549,\n        \"name\": [\n            \"Los Angeles\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"California\"\n        ],\n        \"lgbtq\": 37,\n        \"medical\": 82,\n        \"overall\": 45,\n        \"physical\": 45,\n        \"political\": 54,\n        \"theft\": 23,\n        \"women\": 26,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 34.05223,\n        \"longitude\": -118.24368\n    },\n    {\n        \"city_id\": 118499,\n        \"name\": [\n            \"Houston\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"Texas\"\n        ],\n        \"lgbtq\": 39,\n        \"medical\": 82,\n        \"overall\": 48,\n        \"physical\": 53,\n        \"political\": 50,\n        \"theft\": 33,\n        \"women\": 28,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 29.762777777,\n        \"longitude\": -95.383055555\n    },\n    {\n        \"city_id\": 118731,\n        \"name\": [\n            \"San Antonio\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"Texas\"\n        ],\n        \"lgbtq\": 39,\n        \"medical\": 84,\n        \"overall\": 45,\n        \"physical\": 35,\n        \"political\": 40,\n        \"theft\": 41,\n        \"women\": 33,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 29.425,\n        \"longitude\": -98.493888888\n    },\n    {\n        \"city_id\": 120473,\n        \"name\": [\n            \"Chicago\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"Illinois\"\n        ],\n        \"lgbtq\": 41,\n        \"medical\": 86,\n        \"overall\": 54,\n        \"physical\": 58,\n        \"political\": 65,\n        \"theft\": 38,\n        \"women\": 35,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 41.881944444,\n        \"longitude\": -87.627777777\n    },\n    {\n        \"city_id\": 117951,\n        \"name\": [\n            \"Philadelphia\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"Pennsylvania\"\n        ],\n        \"lgbtq\": 41,\n        \"medical\": 79,\n        \"overall\": 50,\n        \"physical\": 52,\n        \"political\": 57,\n        \"theft\": 33,\n        \"women\": 37,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 39.952777777,\n        \"longitude\": -75.163611111\n    },\n    {\n        \"city_id\": 126034,\n        \"name\": [\n            \"Phoenix\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"Arizona\"\n        ],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 33.528333333,\n        \"longitude\": -112.076388888\n    },\n    {\n        \"city_id\": 123716,\n        \"name\": [\n            \"Queens\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"New York\"\n        ],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 40.704166666,\n        \"longitude\": -73.917777777\n    },\n    {\n        \"city_id\": 123511,\n        \"name\": [\n            \"Manhattan\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"New York\"\n        ],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 40.728333333,\n        \"longitude\": -73.994166666\n    },\n    {\n        \"city_id\": 122111,\n        \"name\": [\n            \"Brooklyn\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"New York\"\n        ],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 40.692777777,\n        \"longitude\": -73.990277777\n    },\n    {\n        \"city_id\": 123214,\n        \"name\": [\n            \"New York City\"\n        ],\n        \"country\": [\n            \"United States of America\"\n        ],\n        \"region\": [\n            \"New York\"\n        ],\n        \"lgbtq\": null,\n        \"medical\": null,\n        \"overall\": null,\n        \"physical\": null,\n        \"political\": null,\n        \"theft\": null,\n        \"women\": null,\n        \"country_code\": [\n            \"US\"\n        ],\n        \"latitude\": 40.67,\n        \"longitude\": -73.94\n    }\n]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "airport",
			"item": [
				{
					"name": "Airports - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b926f32-0926-4b9c-9b3a-03e7d8ddb993",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"First airport should be BKK\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].iata_code[0]).to.eql(\"BKK\");",
									"    pm.expect(jsonData[0].airport_name[0]).to.eql(\"SUVARNABHUMI INTL\");",
									"    pm.expect(jsonData[0].city_name[0]).to.eql(\"BANGKOK\");",
									"    pm.expect(jsonData[0].country_name[0]).to.eql(\"THAILAND\");",
									"});",
									"pm.test(\"Second airport should be HDY\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].iata_code[0]).to.eql(\"HDY\");",
									"    pm.expect(jsonData[1].airport_name[0]).to.eql(\"INTERNATIONAL\");",
									"    pm.expect(jsonData[1].city_name[0]).to.eql(\"HAT YAI\");",
									"    pm.expect(jsonData[1].country_name[0]).to.eql(\"THAILAND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports"
							]
						},
						"description": "returns coordinates, country, and time offset of all airports"
					},
					"response": [
						{
							"name": "Successfully returned airports",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/airports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"airports"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "52368"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"iata_code\": [\n            \"BKK\"\n        ],\n        \"airport_name\": [\n            \"SUVARNABHUMI INTL\"\n        ],\n        \"city_name\": [\n            \"BANGKOK\"\n        ],\n        \"country_name\": [\n            \"THAILAND\"\n        ],\n        \"country_code\": [\n            \"TH\"\n        ],\n        \"latitude\": 13.69139,\n        \"longitude\": 100.7508,\n        \"time_offset\": [\n            \"+07:00\"\n        ]\n    },\n    {\n        \"iata_code\": [\n            \"HDY\"\n        ],\n        \"airport_name\": [\n            \"INTERNATIONAL\"\n        ],\n        \"city_name\": [\n            \"HAT YAI\"\n        ],\n        \"country_name\": [\n            \"THAILAND\"\n        ],\n        \"country_code\": [\n            \"TH\"\n        ],\n        \"latitude\": 6.93334,\n        \"longitude\": 100.3931,\n        \"time_offset\": [\n            \"+07:00\"\n        ]\n    }\n...]"
						}
					]
				},
				{
					"name": "Airports - search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1e55892-57fa-419f-93f4-1614a78f60fe",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"first airport by longitude in china should be CTU\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].iata_code[0]).to.eql(\"CTU\");",
									"    pm.expect(jsonData[0].airport_name[0]).to.eql(\"SHUANGLIU INTL\");",
									"    pm.expect(jsonData[0].city_name[0]).to.eql(\"CHENGDU\");",
									"    pm.expect(jsonData[0].country_name[0]).to.eql(\"CHINA\");",
									"    pm.expect(jsonData[0].longitude).to.eql(103.9472);",
									"    pm.expect(jsonData[0].latitude).to.eql(30.57862);",
									"});",
									"",
									"pm.test(\"second airport by longitude in china should be SYX\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].iata_code[0]).to.eql(\"SYX\");",
									"    pm.expect(jsonData[1].airport_name[0]).to.eql(\"PHOENIX INTL\");",
									"    pm.expect(jsonData[1].city_name[0]).to.eql(\"SANYA\");",
									"    pm.expect(jsonData[1].country_name[0]).to.eql(\"CHINA\");",
									"    pm.expect(jsonData[1].longitude).to.eql(109.4122);",
									"    pm.expect(jsonData[1].latitude).to.eql(18.30278);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/airports/search?sort=longitude&country_name=CHINA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"airports",
								"search"
							],
							"query": [
								{
									"key": "iata_code",
									"value": "<string>",
									"description": "optional- search by iata code",
									"disabled": true
								},
								{
									"key": "airport_name",
									"value": "<string>",
									"description": "optional- search by airport name",
									"disabled": true
								},
								{
									"key": "city_name",
									"value": "<string>",
									"description": "optional- search for airports in given city",
									"disabled": true
								},
								{
									"key": "country_code",
									"value": "<string>",
									"description": "optional- search for airports in country by country code",
									"disabled": true
								},
								{
									"key": "latitude",
									"value": "<float>",
									"description": "optional- search for airport at exact latitude",
									"disabled": true
								},
								{
									"key": "longitude",
									"value": "<float>",
									"description": "optional- search for airport at exact longitude",
									"disabled": true
								},
								{
									"key": "time_offset",
									"value": "<integer>",
									"description": "optional- search for airport in specified time zone",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "<[latitude, longitude, time_offset]><[[GTE],[LTE]]><float>",
									"description": "optional- filter results to be above or below coordinate, before or after offset",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "<[latitude, longitude, time_offset, longitude, latitude, country_code, country_name, city_name, airport-name, iata_code]>",
									"description": "optional- sort resutls alphabetically or numerically, a '-' sign before the parameter will reverse the order",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "longitude"
								},
								{
									"key": "country_name",
									"value": "CHINA"
								},
								{
									"key": "country_name",
									"value": "<string>",
									"disabled": true
								}
							]
						},
						"description": "returns coordinates, and time offset of all airports in search"
					},
					"response": [
						{
							"name": "Airports - search United Kingdom above 0 degrees longitude",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/airports/search?filter=longitude[GTE]0&country_name=United Kingdom",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"airports",
										"search"
									],
									"query": [
										{
											"key": "iata_code",
											"value": "<string>",
											"description": "optional- search by iata code",
											"disabled": true
										},
										{
											"key": "airport_name",
											"value": "<string>",
											"description": "optional- search by airport name",
											"disabled": true
										},
										{
											"key": "city_name",
											"value": "<string>",
											"description": "optional- search for airports in given city",
											"disabled": true
										},
										{
											"key": "country_code",
											"value": "<string>",
											"description": "optional- search for airports in country by country code",
											"disabled": true
										},
										{
											"key": "latitude",
											"value": "<float>",
											"description": "optional- search for airport at exact latitude",
											"disabled": true
										},
										{
											"key": "longitude",
											"value": "<float>",
											"description": "optional- search for airport at exact longitude",
											"disabled": true
										},
										{
											"key": "time_offset",
											"value": "<integer>",
											"description": "optional- search for airport in specified time zone",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "<[latitude, longitude, time_offset, longitude, latitude, country_code, country_name, city_name, airport-name, iata_code]>",
											"description": "optional- sort resutls alphabetically or numerically, a '-' sign before the parameter will reverse the order",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "longitude[GTE]0"
										},
										{
											"key": "country_name",
											"value": "United Kingdom"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "content-length",
									"value": "214"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[{\"iata_code\": [\"LYX\"], \"airport_name\": [\"LONDON ASHFORD\"], \"city_name\": [\"LYDD\"], \"country_name\": [\"UNITED KINGDOM\"], \"country_code\": [\"GB\"], \"latitude\": 50.95612, \"longitude\": 0.93917, \"time_offset\": [\"+01:00\"]}]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "covid",
			"item": [
				{
					"name": "COVID-stats - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d7e9d5d-8fb0-4c7f-ab40-37dde95a3354",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"First country Afghanistan's data should line up\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].country_code[0]).to.eql(\"AF\");",
									"    pm.expect(jsonData[0].country[0]).to.eql(\"Afghanistan\");",
									"    pm.expect(jsonData[0].new_cases).to.eql(77);",
									"    pm.expect(jsonData[0].total_cases).to.eql(39693);",
									"    pm.expect(jsonData[0].new_deaths).to.eql(2);",
									"    pm.expect(jsonData[0].total_deaths).to.eql(1472);",
									"    pm.expect(jsonData[0].date[0]).to.eql(\"2020-10-10T19:36:09Z\");",
									"});",
									"pm.test(\"Second country Albania's data should line up\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].country_code[0]).to.eql(\"AL\");",
									"    pm.expect(jsonData[1].country[0]).to.eql(\"Albania\");",
									"    pm.expect(jsonData[1].new_cases).to.eql(167);",
									"    pm.expect(jsonData[1].total_cases).to.eql(15066);",
									"    pm.expect(jsonData[1].new_deaths).to.eql(2);",
									"    pm.expect(jsonData[1].total_deaths).to.eql(413);",
									"    pm.expect(jsonData[1].date[0]).to.eql(\"2020-10-10T19:36:09Z\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/covid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"covid"
							]
						},
						"description": "returns covid statistics on all countries"
					},
					"response": [
						{
							"name": "COVID-stats - successfully returned countries",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/covid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"covid"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-length",
									"value": "30808"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"country_code\": [\n            \"AF\"\n        ],\n        \"country\": [\n            \"Afghanistan\"\n        ],\n        \"new_cases\": 77,\n        \"total_cases\": 39693,\n        \"new_deaths\": 2,\n        \"total_deaths\": 1472,\n        \"date\": [\n            \"2020-10-10T19:36:09Z\"\n        ]\n    },\n    {\n        \"country_code\": [\n            \"AL\"\n        ],\n        \"country\": [\n            \"Albania\"\n        ],\n        \"new_cases\": 167,\n        \"total_cases\": 15066,\n        \"new_deaths\": 2,\n        \"total_deaths\": 413,\n        \"date\": [\n            \"2020-10-10T19:36:09Z\"\n        ]\n    },\n    {\n        \"country_code\": [\n            \"DZ\"\n        ],\n        \"country\": [\n            \"Algeria\"\n        ],\n        \"new_cases\": 146,\n        \"total_cases\": 52804,\n        \"new_deaths\": 6,\n        \"total_deaths\": 1789,\n        \"date\": [\n            \"2020-10-10T19:36:09Z\"\n        ]\n    },\n...]"
						}
					]
				},
				{
					"name": "COVID-stats - search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcba5b60-7e79-40fd-ad22-3a06590af9d8",
								"exec": [
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"pm.test(\"Searched countries with deaths greater than 10000 sorted by total cases should start with Ecuador\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].country_code[0]).to.eql(\"EC\");",
									"    pm.expect(jsonData[0].country[0]).to.eql(\"Ecuador\");",
									"    pm.expect(jsonData[0].new_cases).to.eql(803);",
									"    pm.expect(jsonData[0].total_cases).to.eql(145848);",
									"    pm.expect(jsonData[0].new_deaths).to.eql(34);",
									"    pm.expect(jsonData[0].total_deaths).to.eql(12175);",
									"    pm.expect(jsonData[0].date[0]).to.eql(\"2020-10-10T19:36:09Z\");",
									"});",
									"pm.test(\"Searched countries with deaths greater than 10000 sorted by total cases should start with Ecuador\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].country_code[0]).to.eql(\"BE\");",
									"    pm.expect(jsonData[1].country[0]).to.eql(\"Belgium\");",
									"    pm.expect(jsonData[1].new_cases).to.eql(5385);",
									"    pm.expect(jsonData[1].total_cases).to.eql(148981);",
									"    pm.expect(jsonData[1].new_deaths).to.eql(25);",
									"    pm.expect(jsonData[1].total_deaths).to.eql(10151);",
									"    pm.expect(jsonData[1].date[0]).to.eql(\"2020-10-10T19:36:09Z\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/covid/search?filter=total_deaths[GTE]10000&sort=total_cases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"covid",
								"search"
							],
							"query": [
								{
									"key": "country_code",
									"value": "<string>",
									"description": "optional- country's code",
									"disabled": true
								},
								{
									"key": "country",
									"value": "<string>",
									"description": "optional- country's name",
									"disabled": true
								},
								{
									"key": "new_cases",
									"value": "<integer>",
									"description": "optional- search for countries with specified # of new cases",
									"disabled": true
								},
								{
									"key": "total_cases",
									"value": "<integer>",
									"description": "optional- search for countries with specified # of total cases",
									"disabled": true
								},
								{
									"key": "total_deaths",
									"value": "<integer>",
									"description": "optional- search for countries with specified # of total deaths",
									"disabled": true
								},
								{
									"key": "date",
									"value": "<date>",
									"description": "optional- search for date \"YYYY-MM-DDThh:mm:ssZ\"",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "<[new_cases, total_cases, new_deaths, total_deaths]><[[GTE], [LTE]]><integer>",
									"description": "optional- filter results' parameter for values >= or <= given value",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "<[new_cases, total_cases, new_deaths, total_deaths]>",
									"description": "optional- sort results by parameter, a '-' in front will reverse the order",
									"disabled": true
								},
								{
									"key": "filter",
									"value": "total_deaths[GTE]10000"
								},
								{
									"key": "sort",
									"value": "total_cases"
								}
							]
						},
						"description": "returns covid statistics on searched fields"
					},
					"response": [
						{
							"name": "COVID-stats - countries with < 100 cases sorted by total cases ascending",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/covid/search?filter=total_cases[LTE]100&sort=total_cases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"covid",
										"search"
									],
									"query": [
										{
											"key": "country_code",
											"value": "<string>",
											"description": "optional- country's code",
											"disabled": true
										},
										{
											"key": "country",
											"value": "<string>",
											"description": "optional- country's name",
											"disabled": true
										},
										{
											"key": "new_cases",
											"value": "<integer>",
											"description": "optional- search for countries with specified # of new cases",
											"disabled": true
										},
										{
											"key": "total_cases",
											"value": "<integer>",
											"description": "optional- search for countries with specified # of total cases",
											"disabled": true
										},
										{
											"key": "total_deaths",
											"value": "<integer>",
											"description": "optional- search for countries with specified # of total deaths",
											"disabled": true
										},
										{
											"key": "date",
											"value": "<date>",
											"description": "optional- search for date <3??",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "total_cases[LTE]100",
											"description": "optional- filter results' parameter for values >= or <= given value"
										},
										{
											"key": "sort",
											"value": "total_cases"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "content-length",
									"value": "1944"
								},
								{
									"key": "content-type",
									"value": "text/html; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[{\"country_code\": [\"MO\"], \"country\": [\"Macao\", \"SAR China\"], \"new_cases\": 0, \"total_cases\": 0, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"RE\"], \"country\": [\"R\\u00e9union\"], \"new_cases\": 0, \"total_cases\": 0, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"EH\"], \"country\": [\"Western Sahara\"], \"new_cases\": 0, \"total_cases\": 10, \"new_deaths\": 0, \"total_deaths\": 1, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"VA\"], \"country\": [\"Holy See (Vatican City State)\"], \"new_cases\": 0, \"total_cases\": 12, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"KN\"], \"country\": [\"Saint Kitts and Nevis\"], \"new_cases\": 0, \"total_cases\": 19, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"LA\"], \"country\": [\"Lao PDR\"], \"new_cases\": 0, \"total_cases\": 23, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"GD\"], \"country\": [\"Grenada\"], \"new_cases\": 0, \"total_cases\": 24, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"LC\"], \"country\": [\"Saint Lucia\"], \"new_cases\": 0, \"total_cases\": 28, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"TL\"], \"country\": [\"Timor-Leste\"], \"new_cases\": 0, \"total_cases\": 28, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"DM\"], \"country\": [\"Dominica\"], \"new_cases\": 1, \"total_cases\": 32, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"FJ\"], \"country\": [\"Fiji\"], \"new_cases\": 0, \"total_cases\": 32, \"new_deaths\": 0, \"total_deaths\": 2, \"date\": [\"2020-10-10T19:36:09Z\"]}, {\"country_code\": [\"VC\"], \"country\": [\"Saint Vincent and Grenadines\"], \"new_cases\": 0, \"total_cases\": 64, \"new_deaths\": 0, \"total_deaths\": 0, \"date\": [\"2020-10-10T19:36:09Z\"]}]"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "baseUrl",
			"key": "baseUrl",
			"value": "https://api.travelwise.live",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}